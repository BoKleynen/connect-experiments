// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: greet/v1/service.proto

package greetv1connect

import (
	context "context"
	errors "errors"
	v1 "github.com/BoKleynen/connect-experiments/gen/proto/greet/v1"
	connect_go "github.com/bufbuild/connect-go"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// GreeterServiceName is the fully-qualified name of the GreeterService service.
	GreeterServiceName = "greet.v1.GreeterService"
)

// GreeterServiceClient is a client for the greet.v1.GreeterService service.
type GreeterServiceClient interface {
	Greet(context.Context, *connect_go.Request[v1.GreetMessage]) (*connect_go.Response[v1.GreetResponse], error)
}

// NewGreeterServiceClient constructs a client for the greet.v1.GreeterService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewGreeterServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) GreeterServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &greeterServiceClient{
		greet: connect_go.NewClient[v1.GreetMessage, v1.GreetResponse](
			httpClient,
			baseURL+"/greet.v1.GreeterService/Greet",
			opts...,
		),
	}
}

// greeterServiceClient implements GreeterServiceClient.
type greeterServiceClient struct {
	greet *connect_go.Client[v1.GreetMessage, v1.GreetResponse]
}

// Greet calls greet.v1.GreeterService.Greet.
func (c *greeterServiceClient) Greet(ctx context.Context, req *connect_go.Request[v1.GreetMessage]) (*connect_go.Response[v1.GreetResponse], error) {
	return c.greet.CallUnary(ctx, req)
}

// GreeterServiceHandler is an implementation of the greet.v1.GreeterService service.
type GreeterServiceHandler interface {
	Greet(context.Context, *connect_go.Request[v1.GreetMessage]) (*connect_go.Response[v1.GreetResponse], error)
}

// NewGreeterServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewGreeterServiceHandler(svc GreeterServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/greet.v1.GreeterService/Greet", connect_go.NewUnaryHandler(
		"/greet.v1.GreeterService/Greet",
		svc.Greet,
		opts...,
	))
	return "/greet.v1.GreeterService/", mux
}

// UnimplementedGreeterServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedGreeterServiceHandler struct{}

func (UnimplementedGreeterServiceHandler) Greet(context.Context, *connect_go.Request[v1.GreetMessage]) (*connect_go.Response[v1.GreetResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("greet.v1.GreeterService.Greet is not implemented"))
}
